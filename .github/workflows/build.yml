name: Build standalone app

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]  # remove ubuntu if you only want .exe

    env:
      APP_NAME: MyApp            # <- change if you want a different exe name
      ENTRYPOINT: main.py        # <- set to app.py or main.py (your app's start file)

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pyinstaller

        shell: bash

      # PyInstaller uses different separators for --add-data on Win vs *nix.
      - name: Compute add-data arg
        id: adddata
        shell: bash
        run: |
          if [ -d "templates" ]; then
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              echo "ADD=templates;templates" >> $GITHUB_OUTPUT
            else
              echo "ADD=templates:templates" >> $GITHUB_OUTPUT
            fi
          else
            echo "ADD=" >> $GITHUB_OUTPUT
          fi

      - name: Build with PyInstaller
        shell: bash
        run: |
          ICON_ARG=""
          if [ -f "generated-icon.png" ]; then
            ICON_ARG="--icon generated-icon.png"
          fi

          ADD_ARG=""
          if [ -n "${{ steps.adddata.outputs.ADD }}" ]; then
            ADD_ARG="--add-data \"${{ steps.adddata.outputs.ADD }}\""
          fi

          # --windowed removes the console window (keep/remove as you prefer)
          pyinstaller $ICON_ARG $ADD_ARG --name "${APP_NAME}" --onefile --windowed "${ENTRYPOINT}"

      - name: Package artifact
        shell: bash
        run: |
          mkdir -p artifact
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            cp "dist/${APP_NAME}.exe" artifact/
          else
            cp "dist/${APP_NAME}" artifact/
          fi
          # include helpful run scripts if you have them
          [ -f run.bat ] && cp run.bat artifact/
          [ -f run.sh ] && cp run.sh artifact/
          # include config/assets if needed
          [ -d templates ] && cp -r templates artifact/

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-${{ runner.os }}
          path: artifact
          if-no-files-found: error
