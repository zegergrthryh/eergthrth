name: Build EXE

on:
  workflow_dispatch:
  push:
    branches: [ main ]

jobs:
  build-windows:
    runs-on: windows-latest
    env:
      APP_NAME: MyApp         # <-- change if you want another exe name
      ENTRYPOINT: app.py     # <-- set to app.py if that is your starter

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
          pip install pyinstaller

      - name: Sanity checks
        shell: pwsh
        run: |
          Write-Host "ENTRYPOINT = $env:ENTRYPOINT"
          if (!(Test-Path $env:ENTRYPOINT)) {
            Get-ChildItem -Name
            throw "ENTRYPOINT not found in repo root"
          }
          if (Test-Path "generated-icon.ico") {
            Write-Host "Will use generated-icon.ico"
          } else {
            Write-Host "No .ico found; skipping icon (Windows needs .ico, not .png)"
          }

      - name: Build executable (PyInstaller)
        shell: pwsh
        run: |
          $iconArg = ""
          if (Test-Path "generated-icon.ico") { $iconArg = "--icon generated-icon.ico" }

          $addArg = ""
          if (Test-Path "templates") { $addArg = "--add-data templates;templates" }

          # Call as a module to avoid PATH/arg parsing quirks
          python -m PyInstaller `
            $iconArg $addArg `
            --name "$env:APP_NAME" `
            --onefile `
            --windowed `
            "$env:ENTRYPOINT"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.APP_NAME }}-Windows
          path: dist/${{ env.APP_NAME }}.exe
          if-no-files-found: error
